Title: What is webpack and Babel. How to use it?
Link: https://www.freecodecamp.org/news/an-intro-to-webpack-what-it-is-and-how-to-use-it-8304ecdc3c60/

During the times the Javascript was newly introduced and people were slowly moving towards it. The biggest of hurdle encountered was how to manage such a lot of unstructered files and packages and to make bowswers interpreat the code in their package. To answer these issues, webpack was created.

Webpack walks through our package and create a dependency graph that our app require to function. Keeping them in mind, it organizes a bare minimum amount of files and create a new package of it. often as bundle.js.

STEP01:
Let's image we are creating a sample react web app. we need to add webpack, so we can bundle our app together. we will also require hot reloading which is possible using the webpack dev server.

$ npm i webpack webpack-dev-server webpack-cli --save--dev

The --save--dev is to specify that these modules are just dev dependencies. Here we are using React, and since react uses ES6 classes and import statements, something that all the browsers may not be able to understand. To make sure that the code is readable by all browsers, we need a tool like babel to transpile our code to normal readable code for browsers.

$ npm i babel-core babel-loader @babel/preset-react     @babel/preset-env html-webpack-plugin --save-dev


STEP02:
Now, add webpack.config.js in the root folder and configure with following statements,

const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
module.exports = {  //This property defines where the application starts  
	entry:'./src/index.js', //This property defines the file path and the file name which will be used for deploying the bundled file  
	output:{    
		path: path.join(__dirname, '/dist'),    
		filename: 'bundle.js'  }, //Setup loaders  
		module: {    
			rules: [      {        test: /\.js$/,         
			exclude: /node_modules/,        
			use: {          
				loader: 'babel-loader'        }      }    ]  }, // Setup plugin to use a HTML file for serving bundled js files 
			plugins: [    
				new HtmlWebpackPlugin({      
				template: './src/index.html'    })  ]}

Here we have; 
Entry property, which is used to specify which file webpack should start with to get the internal dependency graph created. 
Output file specify where bundle should be generated, this is done by output.path and output.filename properties.
Loaders specofy what webpack whould do for specific file witha specific language
plugin property. This is used to extend the capabilities of webpack. Before a plugin can be used in the plugin array inside the module exports object, we need to require the same.

STEP03:
Now create a .babelrc file to use the babel preset with following content;

{  "presets": ["env", "react"]}

STEP04:
Create your sample react app

STEP05 (Enable hot reloading):

Remove the test property in the scripts object of your package.json file and add these two scripts:

"start": "webpack-dev-server --mode development --open --hot",
"build": "webpack --mode production"

STEP06:
Now you just need to hit the command, npm build, and webpack will create an optimised bundle in your project folder which can be deployed on any web server.

